x-nifi-base: &nifi-base
  image: apache/nifi:1.21.0
  networks:
    - nifi-network

x-nifi-toolkit-base: &nifi-toolkit-base
  image: apache/nifi-toolkit:1.21.0
  networks:
    - nifi-network

x-nifi-environment: &nifi-environment
  NIFI_WEB_HTTPS_PORT: 8443
  NIFI_CLUSTER_IS_NODE: true
  NIFI_ZK_CONNECT_STRING: zookeeper:2181
  NIFI_ELECTION_MAX_WAIT: 30 sec
  NIFI_ELECTION_MAX_CANDIDATES: 1
  NIFI_SENSITIVE_PROPS_KEY: 3e38a10eb5fb
  NIFI_CLUSTER_NODE_PROTOCOL_PORT: 8082
  NIFI_WEB_PROXY_HOST: 192.168.1.128:8443
  SINGLE_USER_CREDENTIALS_USERNAME: nifi-user
  SINGLE_USER_CREDENTIALS_PASSWORD: nifi-pw
  NIFI_SECURITY_USER_AUTHORIZER: single-user-authorizer
  NIFI_SECURITY_USER_LOGIN_IDENTITY_PROVIDER: single-user-provider
  INITIAL_ADMIN_IDENTITY: nifi-user
  AUTH: tls
  KEYSTORE_TYPE: JKS
  KEYSTORE_PASSWORD: supersecretkeystore
  TRUSTSTORE_TYPE: JKS
  TRUSTSTORE_PASSWORD: supersecrettruststore

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.4
    container_name: zookeeper
    hostname: zookeeper
    networks:
      - nifi-network
    volumes:
      - zookeeper_log:/var/lib/zookeeper/log
      - zookeeper_data:/var/lib/zookeeper/data
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2

  nifi-toolkit:
    <<: *nifi-toolkit-base
    container_name: nifi-toolkit
    volumes:
      - nifi_certs:/opt/certs
    user: root
    entrypoint: ["bash", "-c", "/opt/nifi-toolkit/*/bin/tls-toolkit.sh standalone -o /opt/certs -n nifi-[1-3] -P supersecrettruststore -K supersecretkeystore -S supersecretkeystore; chown -R nifi:nifi /opt/certs"]

  nifi-1:
    <<: *nifi-base
    container_name: nifi-1
    hostname: nifi-1
    depends_on:
      nifi-toolkit:
        condition: service_completed_successfully
    volumes:
      - ./kafka-truststore.jks:/opt/nifi/nifi-current/kafka-truststore.jks
      - nifi_certs:/opt/certs
      - nifi-1_conf:/opt/nifi/nifi-current/conf
      - nifi-1_extensions:/opt/nifi/nifi-current/extensions
      - nifi-1_database_repository:/opt/nifi/nifi-current/database_repository
      - nifi-1_flowfile_repository:/opt/nifi/nifi-current/flowfile_repository
      - nifi-1_content_repository:/opt/nifi/nifi-current/content_repository
      - nifi-1_provenance_repository:/opt/nifi/nifi-current/provenance_repository
      - nifi-1_state:/opt/nifi/nifi-current/state
      - nifi-1_logs:/opt/nifi/nifi-current/logs
    environment:
      <<: *nifi-environment
      NIFI_CLUSTER_ADDRESS: nifi-1
      NIFI_WEB_HTTPS_HOST: nifi-1
      KEYSTORE_PATH: /opt/certs/nifi-1/keystore.jks
      TRUSTSTORE_PATH: /opt/certs/nifi-1/truststore.jks
    entrypoint:
      - "/bin/bash"
      - "-c"
      - "sed -i 's/nifi.ui.banner.text=.*/nifi.ui.banner.text=nifi-1 (v1.21.0)/' conf/nifi.properties; ../scripts/start.sh"

  nifi-2:
    <<: *nifi-base
    container_name: nifi-2
    hostname: nifi-2
    depends_on:
      nifi-toolkit:
        condition: service_completed_successfully
    volumes:
      - ./kafka-truststore.jks:/opt/nifi/nifi-current/kafka-truststore.jks
      - nifi_certs:/opt/certs
      - nifi-2_conf:/opt/nifi/nifi-current/conf
      - nifi-2_extensions:/opt/nifi/nifi-current/extensions
      - nifi-2_database_repository:/opt/nifi/nifi-current/database_repository
      - nifi-2_flowfile_repository:/opt/nifi/nifi-current/flowfile_repository
      - nifi-2_content_repository:/opt/nifi/nifi-current/content_repository
      - nifi-2_provenance_repository:/opt/nifi/nifi-current/provenance_repository
      - nifi-2_state:/opt/nifi/nifi-current/state
      - nifi-2_logs:/opt/nifi/nifi-current/logs
    environment:
      <<: *nifi-environment
      NIFI_CLUSTER_ADDRESS: nifi-2
      NIFI_WEB_HTTPS_HOST: nifi-2
      KEYSTORE_PATH: /opt/certs/nifi-2/keystore.jks
      TRUSTSTORE_PATH: /opt/certs/nifi-2/truststore.jks
    entrypoint:
      - "/bin/bash"
      - "-c"
      - "sed -i 's/nifi.ui.banner.text=.*/nifi.ui.banner.text=nifi-2 (v1.21.0)/' conf/nifi.properties; ../scripts/start.sh"

  nifi-3:
    <<: *nifi-base
    container_name: nifi-3
    hostname: nifi-3
    depends_on:
      nifi-toolkit:
        condition: service_completed_successfully
    volumes:
      - ./kafka-truststore.jks:/opt/nifi/nifi-current/kafka-truststore.jks
      - nifi_certs:/opt/certs
      - nifi-3_conf:/opt/nifi/nifi-current/conf
      - nifi-3_extensions:/opt/nifi/nifi-current/extensions
      - nifi-3_database_repository:/opt/nifi/nifi-current/database_repository
      - nifi-3_flowfile_repository:/opt/nifi/nifi-current/flowfile_repository
      - nifi-3_content_repository:/opt/nifi/nifi-current/content_repository
      - nifi-3_provenance_repository:/opt/nifi/nifi-current/provenance_repository
      - nifi-3_state:/opt/nifi/nifi-current/state
      - nifi-3_logs:/opt/nifi/nifi-current/logs
    environment:
      <<: *nifi-environment
      NIFI_CLUSTER_ADDRESS: nifi-3
      NIFI_WEB_HTTPS_HOST: nifi-3
      KEYSTORE_PATH: /opt/certs/nifi-3/keystore.jks
      TRUSTSTORE_PATH: /opt/certs/nifi-3/truststore.jks
    entrypoint:
      - "/bin/bash"
      - "-c"
      - "sed -i 's/nifi.ui.banner.text=.*/nifi.ui.banner.text=nifi-3 (v1.21.0)/' conf/nifi.properties; ../scripts/start.sh"

  app_producer:
    build:
      context: .
      dockerfile: docker/Dockerfile
    networks:
      - nifi-network
    env_file:
      - .env
    command: python3 producer.py
    restart: always
    deploy:
      mode: replicated
      replicas: 3

  app_consumer:
    build:
      context: .
      dockerfile: docker/Dockerfile
    networks:
      - nifi-network
    env_file:
      - .env
    command: python3 consumer.py
    restart: always
    deploy:
      mode: replicated
      replicas: 3

  postgres:
    image: debezium/postgres:16
    container_name: postgres
    hostname: postgres
    ports:
      - 127.0.0.1:5432:5432
    networks:
      - nifi-network
    volumes:
      - ./postgres/user-config.conf:/etc/postgresql/postgresql.conf
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    command: postgres -c config_file=/etc/postgresql/postgresql.conf

  proxy:
    image: nginx:latest
    container_name: proxy
    hostname: nginx
    ports:
      - 8443:8443
    networks:
      - nifi-network
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - nifi-1
      - nifi-2
      - nifi-3

volumes:
  zookeeper_log:
  zookeeper_data:
  nifi_certs:
  nifi-1_conf:
  nifi-1_extensions:
  nifi-1_database_repository:
  nifi-1_flowfile_repository:
  nifi-1_content_repository:
  nifi-1_provenance_repository:
  nifi-1_state:
  nifi-1_logs:
  nifi-2_conf:
  nifi-2_extensions:
  nifi-2_database_repository:
  nifi-2_flowfile_repository:
  nifi-2_content_repository:
  nifi-2_provenance_repository:
  nifi-2_state:
  nifi-2_logs:
  nifi-3_conf:
  nifi-3_extensions:
  nifi-3_database_repository:
  nifi-3_flowfile_repository:
  nifi-3_content_repository:
  nifi-3_provenance_repository:
  nifi-3_state:
  nifi-3_logs:

networks:
  nifi-network: